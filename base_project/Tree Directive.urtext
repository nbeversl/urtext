Tree _

Outputs an "anytree" tree of the included nodes. (https://anytree.readthedocs.io/en/latest/)

%%Python 

class TreeDirective:

    name = ['TREE']
    
    def __init__(self, project):
        super().__init__(project)
        self.depth = 1

    def dynamic_output(self, text_contents):
        if self.have_flags('*'):
            self.depth = float('inf')
        else:
            try:
                self.depth = int(self.argument_string)
            except:
                self.depth = 1

        tree_render = ''
        start_points = self.dynamic_definition.included_nodes

        for start_point in start_points:
            start_point_tree_node = self._duplicate_tree(self.Node(start_point.id))            
            level = 0
            for pre, _, this_node in self.RenderTree(
                    start_point_tree_node, 
                    maxlevel=self.depth):

                if self._tree_node_is_excluded(this_node):
                    this_node.children = []
                    continue

                if this_node.name not in self.project.nodes:
                    tree_render += "%s%s" % (
                        indented_pre, 
                        ''.join([
                            self.syntax.missing_link_opening_wrapper,
                            this_node.name,
                            self.syntax.link_closing_wrapper,
                            '\n']
                            ))
                    continue
                else:
                    if this_node.name[:11] == '! RECURSION':
                        tree_render += "%s%s" % (pre, this_node.name + '\n')    
                        continue

                    urtext_node = self.project.nodes[this_node.name]
                
                this_node.children = sorted(
                    this_node.children,
                    key=lambda n: self.project.nodes[n.name].start_position if (
                        n.name in self.project.nodes ) else n.position)

                indented_pre = '  ' + pre

                next_content = self.DynamicOutput(self.dynamic_definition.show, self.project)

                next_content.title = urtext_node.title
               
                link = []
                #TODO refactor
                if urtext_node.project.get_setting('project_title') not in self.project.paths and urtext_node.project.get_setting('project_title') != self.project.get_setting('project_title'):
                    link.extend(['=>"', urtext_node.project.get_setting('project_title'),'"'])
                else:
                    link.append(self.syntax.link_opening_wrapper)
                link.append(urtext_node.id + self.syntax.link_closing_wrapper)
                next_content.link = ''.join(link)

                next_content.pointer = urtext_node.pointer()

                # TODO rewrite
                # if self.project.get_setting('node_date_keyname') and self.project.get_setting('timestamp_format'):
                #     next_content.date = urtext_node.get_date(
                #         self.project.get_setting('node_date_keyname')).strftime(
                #                 self.project.get_setting('timestamp_format'))

                next_content.meta = urtext_node.consolidate_metadata(separator=':')

                if next_content.needs_contents:
                    next_content.contents = urtext_node.stripped_contents

                for meta_key in next_content.needs_other_format_keys:
                    next_content.other_format_keys[meta_key] = urtext_node.metadata.get_extended_values(meta_key)
                
                if level == 0:
                    prefix = pre
                else:
                    prefix = indented_pre

                tree_render += "%s%s" % (prefix, next_content.output())

                level += 1

        return ''.join([text_contents, tree_render])
    
    def _tree_node_is_excluded(self, tree_node):

        node_id = tree_node.name
        if node_id in self.dynamic_definition.target_ids:
            return True

        if self.dynamic_definition.excluded_nodes:

            if node_id in self.dynamic_definition.excluded_nodes:
                return True

            if node_id not in self.project.nodes:
                return True

        return False

    def _duplicate_tree(self, from_tree_node, ancestors=None):

        if ancestors is None:
            ancestors = [from_tree_node.name]
        node_children = self.project.nodes[from_tree_node.name].children
        urtext_node = self.project.nodes[from_tree_node.name]
        for pointer in urtext_node.pointers:
            if pointer['id'] not in ancestors:
                if pointer['id'] not in self.project.nodes:
                    alias_node = self.Node('< Not in project: ' + pointer['id'] + ' >')
                    alias_node.parent = from_tree_node
                    ancestors.append(pointer['id'])
                    continue
                alias_node = self.Node(pointer['id'])
                alias_node.parent = from_tree_node
                ancestors.append(pointer['id'])
                new_pointer_tree_node = self._duplicate_tree(alias_node, ancestors=ancestors)
                new_pointer_tree_node.parent = from_tree_node

        for child in node_children:
            if child.id not in ancestors:               
                new_tree_node = self.Node(child.id)
                new_tree_node.parent = from_tree_node
                new_tree_node.position = child.start_position
                ancestors.append(child.id)
                next_childen_node = self._duplicate_tree(new_tree_node, ancestors=ancestors)
                next_childen_node.parent = from_tree_node
            else:
                new_tree_node = self.Node('! RECURSION (from tree duplication) : '+ child.id + ' >')
                new_tree_node.parent = from_tree_node
                new_tree_node.position = child.start_position  
 
        return from_tree_node

ThisProject.add_directive(TreeDirective)

%%