Navigation _

Provides the global navigation features (next node, previous node) and tracks visited nodes.

%%Python

class Navigation:

	name = ["NAVIGATION"]
	project_list_instance = True

	def __init__(self, project_list):
		super().__init__(project_list)
		self.navigation = []
		self.nav_index = -1
		self.triggered_node_visit = False

	def run(self, arg):
		if arg == 'forward':
			return self.forward()
		if arg == 'reverse':
			return self.reverse()

	def forward(self):

		if self.nav_index == -1:
			self.nav_index = 1
		else: 
			self.nav_index += 1

		if self.nav_index >= len(self.navigation):
				self.nav_index -= 1			
				return print('index is already at the end')

		project, next_node = self.navigation[self.nav_index]
		self.project_list.set_current_project(project)
		self.triggered_node_visit = True
		self.project_list.current_project.open_node(next_node)

	def reverse(self):
		if not self.navigation:
			return print('no nav history')
		if self.nav_index > -1:
			self.nav_index -= 1
		if self.nav_index == -1:
			return print('index is already at the beginning.')
		project, previous_node = self.navigation[self.nav_index]
		self.project_list.set_current_project(project)
		self.triggered_node_visit = True
		self.project_list.current_project.open_node(previous_node)

	def on_node_visited(self, node_id):

		if self.triggered_node_visit:
			self.triggered_node_visit = False
			return
	
		if node_id in self.project_list.current_project.nodes:
			if self.navigation:
				project, last_id = self.navigation[self.nav_index]
			else:
				project = self.project_list.current_project
				last_id = None

			# don't re-remember consecutive duplicate links
			if (-1 < self.nav_index < len(self.navigation) and node_id == last_id): 
				return
			# add the newly opened file as the new "HEAD"
			self.nav_index += 1
			del self.navigation[self.nav_index:]
			self.navigation.append((
				self.project_list.current_project.get_setting('project_title'),
				node_id))

	def on_file_deleted(self, filename):
		for node_id in self.navigation:
			if node_id not in self.project_list.current_project.nodes:
				if self.navigation.index(node_id) <= self.nav_index:
					self.nav_index -= 1
				self.navigation.remove(node_id)

	def on_node_id_changed(self, new_node_id, old_id):
		for index, item in enumerate(self.navigation):
			project = item[0]
			old_nav_id = item[1]
			if project == self.project_list.current_project.get_setting('project_title') and (old_nav_id == old_id):
					self.navigation[index] = (project, new_node_id)
					
ProjectList.add_directive(Navigation)
%%