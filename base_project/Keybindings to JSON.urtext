Keybindings to JSON _

%%Python
class KeybindingsToJson:

	name = ["KEY_BINDINGS_TO_JSON"]
	import json
	import os

	def dynamic_output(self, current_text):
		if self.links:
			link = self.links[0]
			if link.is_file and not link.is_missing:
				json_filepath = link.path
				keybindings = {}
				set_commands = []
				for node in self.frame.included_nodes:
					set_commands.extend(node.metadata.get_keys())
					set_commands = list(set(set_commands))
					for command in set_commands:
						if command == 'title': continue
						key_binding = node.metadata.get_first_value(command)
						if key_binding:
							keybindings[command] = {
								"command": "run_urtext_call",
								"keys": [key_binding.text],
								"args": { "urtext_call" : command},
								}
					current_settings = []
					with open(json_filepath, "r") as f:
						contents = f.read()
						current_settings = self.json.loads(contents)
					new_settings = []
					for k in current_settings:
						if (k["command"] not in [s["command"] for s in new_settings]):
							new_settings.append(k)
					keybindings_list = sorted([keybindings[k] for k in keybindings], key = lambda k: k["args"]["urtext_call"])
					new_settings.extend(keybindings_list)
					with open(json_filepath, "w") as f:
						f.write(self.json.dumps(new_settings, indent=4))
					return current_text + '\n Keybindings written to %s' % self.utils.make_file_link(json_filepath)
		return current_text + '\nKEY_BINDINGS_TO_JSON requires a link to an existing file.' 

ThisProject.add_call(KeybindingsToJson)

%%