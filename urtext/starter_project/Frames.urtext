Frames _

Frames are instruction sets that interact programmatically with the project.

Frames are abstractions on top of the Python language that can modify and extend Urtext up to the capabilities of any Python environment. If Urtext does not have a feature you want, you can add it with some Python knowledge. Frames can generate dynamic text output or execute arbitrary Python code.

	{ Calls _

	  Frames contain calls. Each call triggers an operation or transformation. The output of each call is sent as input to the next. The final output is sent to the node or other target specified.

	  See | All Available Calls > for more information
	}

	{ Syntax _

	  Frames are written in double square brackets: [[ ]]. There are no restrictions on spacing, indentation, newlines, or arbitrary text or whitespace inside.

	  It is not necessary to store the frame in the same file as its target.

	}

	{ Default Execution Times _

	  By default frames run at three times:
	  - When the project initially compiles
	  - When the file containing the frame is visited or saved
	  - When the file containing the frame's target is visited or or saved
	  These defaults can be modified using flags in the | WHEN() > call
	}

	{ Snippet _

	  A Sublime Text snippet is available to create a frame and a target node at the same time.
	  Anywhere in text, type "frame" and press tab. Pressing tab again moves between entry points. You can modify the snippet or create additional ones.

	}

The most basic frame includes:

- a target node for output, using the | TARGET() > call
- specifying what nodes to include, using the | INCLUDE() > call

This example frame populates the node immediately below it, which lists all nodes in this starter project.

[[
.   TARGET(| Index >)
.	Specifies the target output node for the resulting text.
.	see | TARGET() > for more information

.	INCLUDE(*)
.	or +(*)
.	Specifies nodes to include in output. The asterisk includes all nodes in the project.
.	See | INCLUDE() > for more informatino

]]

Nodes with dynamic output begin with the tilde character `~`. The tilde pushes a scope that shades the background so dynamic text can be easily distinguished.

Without any other calls, the default output is a list of links to the included nodes, in alphabetical order by ID:

| Index >>

See Next: | INCLUDE() >
See also:
| INCLUDE() >>
| LIMIT() >>
| SORT() >>
| SHOW() >>
| TREE() >>
| COLLECT() >>
| TEXT() >>
| MAX_LENGTH() >>
| LOG() >>
| EXEC() >>
| WHEN() >>