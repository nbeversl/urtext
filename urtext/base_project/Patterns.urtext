Patterns _

%%Python

class Patterns:

	name = ['PATTERNS']
	project_list_instance = True
	import re
	patterns = {}

	def on_node_added(self, node):
		if self.project_list.current_project:
			patterns = self.project_list.current_project.get_setting('patterns')
			if patterns:
				self.parse_patterns(patterns, node)

	def parse_patterns(self, patterns, node):
		contents = node.replaced_contents
		for pattern in patterns:
			if pattern.node():
				name = pattern.node().metadata.get_first_value('name')
				if name:
					name = name.text
					pattern = pattern.node().metadata.get_first_value('regex')
					pattern = pattern.text
					self.patterns.setdefault(name, [])
					for match in self.re.finditer(pattern, contents):
						self.patterns[name].append({
							'node_id': node.id,
							'start': match.start(),
							'end': match.end(),
							'contents': match.group()
							})

	def on_node_dropped(self, node):
		for pattern in list(self.patterns.keys()):
			self.patterns[pattern] = [e for e in self.patterns[pattern] if e['node_id'] !=node.id]

	def run(self):
		self.pattern_names = list(self.patterns.keys())
		self.project_list.run_editor_method('show_panel', self.pattern_names, self.list_values)

	def list_values(self, index):
		self.selected_pattern = self.pattern_names[index]
		self.values = self.patterns[self.selected_pattern]
		self.project_list.run_editor_method('show_panel', [v['contents'] for v in self.values], self.show_location)

	def show_location(self, index):
		selected_value = self.values[index]
		self.project_list.current_project.open_node(selected_value['node_id'], position=selected_value['start'])

class SearchPatterns:

	name = "Search Patterns"

	def run(self):
		self.project_list.run_call('PATTERNS')

ThisProject.add_action(SearchPatterns)	
ThisProject.add_call(Patterns)
%%

