Frames _

Frames are instruction sets that interact programmatically with the project.

Frames are abstractions on top of the Python language that can modify and extend Urtext up to the capabilities of any Python environment. If Urtext does not have a feature you want, you can add it with some Python knowledge. Frames can generate dynamic text output or execute arbitrary Python code.

	{ Calls _

	  Frames contain calls. Each call triggers an operation or transformation. The output of each call is sent as input to the next. The final output is sent to the node or other target specified.

	  See | All Available Calls > for more information
	}

	{ Syntax _

	  Frames are written in double square brackets: [[ ]]. There are no restrictions on spacing, indentation, newlines, or arbitrary text or whitespace inside.

	  It is not necessary to store the frame in the same file as its target.

	}

	{ Default Execution Times _

	  By default frames run at three times:
	  - When the project initially compiles
	  - When the file containing the frame is visited or saved
	  - When the file containing the frame's target is visited or or saved
	  These defaults can be modified using flags in the | WHEN() > call
	}

	{ Snippet _

	  A Sublime Text snippet is available to create a frame and a target node at the same time.
	  Anywhere in text, type "frame" and press tab. Pressing tab again moves between entry points. You can modify the snippet or create additional ones.

	}

The most basic frame includes:

- a target node for output, using the | TARGET() > call
- specifying what nodes to include, using the | INCLUDE() > call

This example frame populates the node immediately below it, which lists all nodes in this starter project.

[[
.   TARGET(| Example Use of TARGET() and INCLUDE() >)
.	Specifies the target output node for the resulting text.
.	see | TARGET() > for more information

.	INCLUDE(*)
.	or +(*)
.	Specifies nodes to include in output. The asterisk includes all nodes in the project.
.	See | INCLUDE() > for more informatino

]]

Nodes with dynamic output begin with the tilde character `~`. The tilde pushes a scope that shades the background so dynamic text can be easily distinguished.

Without any other calls, the default output is a list of links to the included nodes, in alphabetical order by ID:

	{~ Example Use of TARGET() and INCLUDE() _
	  | (untitled) ^ Base Project Info: >
	  | AND/OR >
	  | About Urtext >
	  | Accessing Nested Metadata in Frames >
	  | Action Links ^ Links >
	  | Action Links ^ WHEN() >
	  | All Available Calls >
	  | All Selectors >
	  | All Selectors Documentation >
	  | All Selectors in Scratch Buffer >
	  | Arguments >
	  | Asterisk >
	  | Auto-Completions >
	  | Base Project Info: >
	  | Bold Text >
	  | Bracket Node Wrappers >
	  | Bracket Nodes >
	  | Browse Metadata >
	  | Bug list >
	  | Bugs >
	  | Bullet >
	  | Bullet Nodes >
	  | COLLECT() >
	  | Calls >
	  | Case-sensitivity >
	  | Code to exec >
	  | Compact Node >
	  | Copy Link to Here >
	  | Copy Link to Here With Project >
	  | Cross-Project Linking >
	  | Custom Themes >
	  | Default Execution Times >
	  | Delete this Node >
	  | Disable Prompts for File Reload >
	  | Dynamic IDs >
	  | EXCLUDE() >
	  | EXEC() >
	  | Escaping Curly Brackets >
	  | Escaping and Embedding >
	  | Evaluation Order >
	  | Example EXEC() output >
	  | Example Python Code >
	  | Example Timstamps >
	  | Example Use of COLLECT() >
	  | Example Use of INCLUDE and EXCLUDE >
	  | Example Use of LIMIT() >
	  | Example Use of MAX_LENGTH >
	  | Example Use of SHOW() >
	  | Example Use of SORT() >
	  | Example Use of TEXT() >
	  | Example Use of TREE() >
	  | Example Use of self >
	  | Example def >
	  | Example of Linked Node as Metadata Output >
	  | Example of Nested Metadata Output >
	  | Example use of LOG >
	  | Extended Metadata >
	  | Extensible >
	  | Features >
	  | Features and Philosophy >
	  | File Links >
	  | File Naming >
	  | File Nodes >
	  | File Output >
	  | Files >
	  | Flags ^ INCLUDE() >
	  | Flags ^ SORT() >
	  | Flags ^ WHEN() >
	  | Forward Links Browser >
	  | Frames >
	  | Freeform, Flexible Syntax >
	  | From a Frame >
	  | From the Urtext Selector List >
	  | Full Screen / Distraction Free Mode >
	  | Full Text Search >
	  | Future Proof >
	  | Generic >
	  | Go to Frame >
	  | HTML >
	  | Hash >
	  | Hiding Line Numbers >
	  | Hiding Tabs >
	  | Hovering the opening of a node could bring up a menu of selectors rather than needing a keypress >
	  | INCLUDE() >
	  | Insert Link to New Node >
	  | Insert Timestamp >
	  | Italic Text >
	  | JSON >
	  | LIMIT() >
	  | LOG() >
	  | Link Preview On Hover >
	  | Link To Node .. >
	  | Link to Character Location >
	  | Links >
	  | Lint Settings >
	  | Local >
	  | MAX_LENGTH() >
	  | Making a File Link With a Dialog in Sublime Text >
	  | Metadata >
	  | Metadata Syntax >
	  | Metadata dropdown should show timestamp if there is no value >
	  | Missing Links >
	  | Move the current file to another project >
	  | Nates-MacBook-Pro.local >
	  | Nav Back >
	  | Nav Forward >
	  | Navigation >
	  | Nested EXEC()s >
	  | Nested Metadata as Link >
	  | New File Node >
	  | Node Browser >
	  | Node Browser All Projects >
	  | Node IDs >
	  | Node Link ^ Links >
	  | Node Link ^ Urtext Syntax >
	  | Node Output >
	  | Node Titles >
	  | Nodes >
	  | Nodes as Metadata >
	  | Nodes as Metadata Values >
	  | On Link Hovered >
	  | One node >
	  | Open Home >
	  | Open Urtext Website >
	  | Open source >
	  | Operators >
	  | POP >
	  | POP and PULL >
	  | PULL >
	  | Parameters ^ MAX_LENGTH() >
	  | Parameters ^ SHOW() >
	  | Parameters ^ TREE() >
	  | Parameters ^ WHEN() >
	  | Plain Text >
	  | Plaintext >
	  | Pointer >
	  | Pop >
	  | Possibly there should be a doc hover for each feature? idk >
	  | Project Naming (Identification) >
	  | Projects >
	  | Projects, Structure and Compiling >
	  | Propagating metadata to descendents >
	  | Pull >
	  | Python >
	  | Pythonista : Use the "?" Urtext Button. Results will be updated in real time in the view behind the search field. To exit, tap outside the search field. >
	  | RENAME_FILES() >
	  | Random Node >
	  | Remove Indent Guides >
	  | Rename All Files >
	  | Rename Single File >
	  | SHOW() >
	  | SORT() >
	  | Save on Focus Lost >
	  | Scott Fitzgerald >
	  | Search >
	  | Searching >
	  | See also: ^ Metadata Syntax >
	  | See also: ^ SHOW() >
	  | Select Project >
	  | Selector Links >
	  | Selectors >
	  | Short description here	asdfasd >
	  | Shorthand ^ INCLUDE() >
	  | Shorthand ^ TARGET() >
	  | Shows an outline of the current file >
	  | Snippet ^ Frames >
	  | Snippet ^ Nested EXEC()s >
	  | Space-Underscore >
	  | Sublime : select                  from the command pallete. This provides an input panel on the lower edge of the screen. Dynamically search results will be shown in a scratch view as you enter search terms. Press ESC to cancel.  Results include links to >
	  | Sublime Text Interface Tips >
	  | Sublime Text Keybindings >
	  | Syntax >
	  | Syntax Highlighting >
	  | System Keys >
	  | TARGET() >
	  | TEXT() >
	  | TREE() >
	  | Table of Contents >
	  | Test output for RENAME_FILES >
	  | The Beautiful and Damned >
	  | Theming Metadata >
	  | Things to do >
	  | Time Zones ^ 1066 >
	  | Time Zones ^ Timestamps >
	  | Timestamp Wrappers >
	  | Timestamps >
	  | Title Key >
	  | Tracking Node Dates and Times ^ 1066 >
	  | Tracking Node Dates and Times ^ Timestamps >
	  | Traverse Mode >
	  | Urtext Selector List for Linking >
	  | Urtext Starter Project >
	  | Urtext Syntax >
	  | Using Multiple Projects >
	  | Using a Sublime Project for an Urtext Project >
	  | Viewing Linked Relationships >
	  | Virtual Targets >
	  | WHEN() >
	  | Web/HTTP(S) Links >
	  | Word Wrap in Traverse Mode >
	  | Wrap Selectino >
	  | another node >
	  | another node ... >
	  | bold >
	  | buffer _ >
	  | clipboard _ >
	  | console _ >
	  | etc. >
	  | example node >
	  | inline_timestamp >
	  | italic >
	  | links_from >
	  | links_to >
	  | log _ >
	  | newest_timestamp >
	  | oldest_timestamp >
	  | output >
	  | output dest >
	  | popup _ >
	  | project_settings >
	  | self >
	  | target link >
	  | test >
	}

See Next: | INCLUDE() >

