TARGET() _ #directive

TARGET directs any | Dynamic Output > to a specific location, either a node in the project, a file, or a virtual target.

{ Node Output _

	If no special syntax is included, the target is assumed to be an existing node in the project.
	The |? Node Link > syntax is not required inside TARGET() but is more readable and also provides a working link to the output node.

	Example:
''
		[[ 	TARGET(some node) ]]
		[[	TARGET(|? some node >) ]]
		The above to examples are equivalent.
}


{ Shorthand _

	TARGET has the shorthand syntax >

	Example:
		[[ TARGET(|? some node >) ]]
		[[ >(|? some node >) ]]
		The above two example are equivalent.

}

{ File Output _
	
	Using the | File Links > syntax inside TARGET() will output the content to the specified file, creating the file if it does not exist.
	Example:

		[[ >(|/ example file output.txt >)
			TEXT(example output)
		]]

	Click the file link to see the outputted text

}

{ Virtual Targets _

	Virtual outputs begin with the `@` character and signify a location other than a node or file.
	Several “virtual outputs” are available.

	{ self _
	sends the output to the node containing the dynamic definition, overwriting/updating any existing content and preserving the definition inside the node.
	Example:

	 {~ Example Use of self Virtual Output _
Examplsdfsdfsde text

[[>(@self) TEXT(Examplsdfsdfsde text)]]}

}
	{ @clipboard _
 	 sends the output to the clipboard, from which it can be pasted.

 	 Example:
		[[ 	>(@clipboard)
			TEXT(example text to the clipboard) ]]

	}

 	{ 	@log _
  		sends the output to the project log, if it exists.

  		[[ >(@log) TEXT(Example text to output to the log) ]]
  		| Example use of LOG >
 }

	{ @console _
	 	sends the output to the Python console

	 	Example:
	 	[[ >(@console) TEXT(Check the Python console for this message) ]]

}
	 { @popup _

		 Sends the output to a popup in the editor.
	 	[[ >(@popup) TEXT(This message will appear in a popup.) ]]
 } 


}
  