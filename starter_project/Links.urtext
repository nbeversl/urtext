Links _

	{ Node Link _

	  To link from one node to another, use the pipe and a space (`| `) followed immediately by a node ID, followed by a space and the right angle bracket (` >`). Examples of links are throughout this starter project.

		{ Urtext Action List for Linking _

		  Two Actions can make linking quick and easy:

		  See | Copy Link to Here >
		  and | Link To Node >
		  See also | Cross-Project Link >
		}

	}

	{ How to Open Links _

	  To **open a link**, hold Ctrl-Shift and click it, or put the cursor on it and press `Ctrl-Shift-/`

	}

	{ Dynamic IDs _

	  Whenever the ID of a node changes, Urtext will try to update links to that node to the new ID.
	}

	{ Link to Character Location _

	  Node links may link to specific locations by following the closing wrapper with a colon and a character number.

	  Example:
	  | File Link >:50 (links to character 50 in | File Link >, below)

	  Since character locations on every edit, this syntax is most useful when outputted dynamically.
	  See the | COLLECT() > call for an example use.

	}

	{ File Link _

	  Links to files can be made by writing `|/ `, followed immediately with a relative or absolute file path, and ending with a right angle bracket ` >`:
	  Example: |/ README.md >

		{ Making a File Link With a Dialog in Sublime Text _

		  Start typing "link to file" in the Sublime Command Palette and select "Urtext: Link To File ...",
		  or press `Ctrl + Shift + J`.

		  Select a file from the dialog to insert the file link.

		  Files with extensions not in the `open_in_editor` key in | project_settings > will open in the system default application.

		}
	}

	{ Web/HTTP(S) Link _

	  HTTP(S) links are recognized automatically and will open in the system default browser.
	  Example: https://urtext.co/
	}

	{ Missing Link _

	  When any syntax links to a node or file not found, a question mark will immediately follow the opening wrapper. Examples:

	  |? Link to a node that does not exist in this project >
	  |/? link/to/file-that-does-not-exist >

	  The question mark will disappear if the node or file is created.

	  Missing link markers are added and removed by Urtext and are "read-only" -- you can add or delete them but they will revert on save.
	}

	{ Trigger Link _

	  The exclamation mark `!` can be inserted after the opening pipe to make a trigger link.
	  Clicking the link triggers execution of its fream (| Frames >) without visiting the frame or target node.

	  Example:

	  Clicking this link will open https://urtext.co/.
	  |! Open Urtext Website >

	  To have an effect, the node must be the target of a frame (see | Frames >)
	}

	{ Action Link _

	  The colon `:` modifier after the opening pipe indicates an action link.
	  The link name is a reference to an Urtext Action, or unit of functionality.

	  Action links are an alternative to menus, dialogs, and or other user interface elements, so all Urtext functionality is accessible from the text. Clicking them is equivalent to selecting the same Action from the dropdown or using their keybindings.

	  Not all actions are equally useful as links.

	  Example:
	  The following action will open a random node in this project:
	  |: Random Node >

	  The referenced action must be available in the project.
	  See | Actions > for more information, including the actions included with Urtext.

	}

	{ Cross-Project Link _

	  To link from one Urtext Project to another use:

	  =>"name or path of the other project"
	  (example only, non-functioning)

	  To link to a specific node, add the "pipe and angle-bracket" notation followed by a node title:
	  =>"name or path of the other project"|? node ID >
	  (example only, non-functioning)

	  Following this link will change the active project to the one linked and open the specified node, if any.

	}

See next: | Metadata Syntax >
