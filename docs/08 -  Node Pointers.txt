
Node Pointers          

    You can extend trees beyond the file level to create node relationships spanning many files. Preceding a link to a node with two right angle brackets instead of one creates a Pointer. In addition to being a hyperlink, this connects the targeted node, and all of its subchildren, as children of the node containing the Pointer. Example:

    Here is an example Child Node >>001 

    The example Pointer above becomes a child of this node, visible in the table of contents (>01a) or using the other tree views described in >00h.

    The advantages to Node Pointers are many, including:

        - The tree represents a hierachy of actual content, rather than the files containing the content.
   
        - The tree permits nesting both within and beyond file level.
   
        - The tree can be displayed from any arbitrary starting point, whether or not its branches are within or beyond a particular file.

{{ Duplicate Node Pointers 
    
    Node Pointers may point more than once to the same node, so that content can be reused or referenced across multiple trees within the same project:
    
    Here is the same example child node from above >>001 


    /-- ID:00t --/ }}


{{  Recursive Node Pointers

    Recursive Node Pointers would be ones that point to one of their containing node's own ancestors, causing a circular reference.

    These are not prohibited, but the recursion will not be drawn if it is already contained in the tree. Instead, the point of recursion will show RECURSION, with a link to the Node ID of the node causing the recursion.

    For example, this Node Pointer points back to the root node of the table of contents: >>a5m. Instead of the table of contents being drawn recursively from this node, you can see the recursion point in the table of contents.

    Note, however, that if you view the entire tree with another node as root, one full iteration will still appear, with the point of recursion falling elsewhere in the tree. For instance, below is the table of contents with the node "Node Pointers" (>00r) as root. See Dynamic Nodes (>01r) for more information on how to generate trees like this in dynamic nodes.


{{
Example - Table of Contents From Another Root
Node Pointers >00r
├── Example Child Node Using a Node Pointer >001
├── Duplicate Node Pointers >00t
    └── Example Child Node Using a Node Pointer >001
└── Recursive Node Pointers >00s
    ├── Urtext Documentation >a5m
        ├── Using this document >009
            ├── On the web >fak
            ├── In Urtext for Sublime Text >e6m
            └── Standalone >plq
        ├── About Urtext >013
            ├── What Urtext Is >hdf
                ├── Description >yv2
                ├── Comparison To Other Tools >h8z
                ├── Uses >lhs
                └── Features and Characteristics >006
            └── About the Sublime Text Implementation >01u
                └── Dependencies and Installation: >2fn
        ├── Setup >003
            ├── Making a New Project >00a
                ├── (Python) >n2m
                └── (Sublime) >phk
            ├── Using Existing Files >00b
                ├── (Python) >b44
                └── (Sublime) >rij
            ├── Sublime Project >c3n
            ├── Reopening a Project >01p
            └── Sublime Text Interface Tips >000
                ├── Syntax Highlighting >01d
                ├── Hiding Tabs >015
                ├── Hiding Line Numbers >01e
                ├── Full Screen / Distraction Free Mode >002
                └── Disable Prompts for File Reload >023
        ├── Writing Nodes >01j
            ├── Node Identity (Node IDs) >01h
                └── Generating a node ID manually >a0i
            ├── File Level Nodes >01g
                └── Creating a File Level Node >ekz
                    ├── (Python) >83e
                    └── (Sublime) >xo8
            ├── ? (Missing Node): >00x
            ├── Inline Nodes >004
                ├── Example inline node >00e
                ├── Creating Inline Nodes >bbj
                    ├── (Sublime) >qx6
                    └── (Python) >4ho
                └── Syntax Highlighting of Inline Nodes >koe
            └── The Node List >01i
        ├── Dynamic Nodes >01r
            ├── Example Source Node 1 >017
            ├── Example Source Node 3 >01b
            ├── Example Source Node 2 >00v
            ├── Example Source Node 4 >01c
            ├── Example Dynamic Node Title >016
            └── Another Example: The Node Definition for the Table of Contents >029
        ├── Trees >00h
            ├── From a selected node >00f
            └── From the root >00g
        ├── Relationships >00j
            ├── Simple Links >0y2
                └── Sublime Text tools to help with linking >00m
            ├── Opening Links >01w
            ├── Viewing Linked Relationships >00u
            ├── Linking to outside resources >00q
                ├── Web >00o
                └── Files >00p
            └── Traverse Mode >00w
                └── Word Wrap in Traverse Mode (Sublime Text) >xci
        ├── ? (Missing Node): >RECURSION >00r
        ├── Search >k67
            └── Fuzzy Full Text Search >4p9
        ├── Filenames >01m
        └── Extension and Customization >01o
    └── Example - Table of Contents From Another Root >01n
/-- 
defined in: >00s
ID: 01n
title: Example - Table of Contents From Another Root
--/}}

    [[ ID:01n
        tree:00r
        metadata:title:Example - Table of Contents From Another Root
     ]]

/-- ID:00s --/ }}    
                                                                                                                     

/-- ID:00r
Timestamp:<Sat., Jun. 08, 2019, 09:01 AM>
tags: 
index: 07
--/